package gofilelogger

import (
	"runtime"
	"strings"

	log "github.com/sirupsen/logrus"
)

type HookFilter struct {
	Filter *LogFilter
	hook   log.Hook
}

func NewHookFilter(hook log.Hook, filter *LogFilter) *HookFilter {
	return &HookFilter{
		hook:   hook,
		Filter: filter,
	}
}

func (hf HookFilter) Levels() []log.Level {
	return log.AllLevels
}

func (hf HookFilter) Fire(entry *log.Entry) error {
	// Search the callstack for the first non-logrus file. This should be where the log call originated from.
	skip := 1
	for {
		_, file, _, ok := runtime.Caller(skip)
		if !ok {
			break
		}

		if !strings.Contains(file, "sirupsen/logrus") && !strings.Contains(file, "<autogenerated>") {
			if hf.ShouldLog(entry, file) {
				return hf.hook.Fire(entry)
			}
			break
		}

		skip++
		if skip > 11 {
			break
		}
	}

	return nil
}

func (hf HookFilter) ShouldLog(entry *log.Entry, file string) bool {
	return hf.Filter.GetFileLevel(file) >= entry.Level
}
