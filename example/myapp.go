package example

import (
	"io/ioutil"
	"runtime"
	"strings"

	log "github.com/sirupsen/logrus"
	filter "github.com/torbensky/gofilelogger"
)

func Run() {
	// Set to debug so handler is called at all levels
	log.SetLevel(log.DebugLevel)
	aHook := ExampleHook{}
	filteredHook := New(aHook)
	log.AddHook(filteredHook)
	log.SetOutput(ioutil.Discard)
	Foo()
	Bar()
}

type HookFilter struct {
	Filter *filter.LogFilter
	hook   log.Hook
}

func New(hook log.Hook) *HookFilter {
	hf := &HookFilter{
		hook: hook,
	}

	// Load filters
	filterExpr := `
		file1.go:debug,
		file2.go:warn,
		github.com/torbensky/gofilelogger:panic
	`
	f, err := filter.LoadConfig(filterExpr)
	if err != nil {
		panic(err) // this is a demo!
	}
	hf.Filter = f

	return hf
}

func (hf HookFilter) Levels() []log.Level {
	return log.AllLevels
}

func (hf HookFilter) Fire(entry *log.Entry) error {
	// Search the callstack for the first non-logrus file. This should be where the log call originated from.
	skip := 1
	for {
		_, file, _, ok := runtime.Caller(skip)
		if !ok {
			break
		}

		if !strings.Contains(file, "sirupsen/logrus") && !strings.Contains(file, "<autogenerated>") {
			if hf.ShouldLog(entry, file) {
				return hf.hook.Fire(entry)
			}
			break
		}

		skip++
		if skip > 11 {
			break
		}
	}

	return nil
}

func (hf HookFilter) ShouldLog(entry *log.Entry, file string) bool {
	return hf.Filter.GetFileLevel(file) >= entry.Level
}
